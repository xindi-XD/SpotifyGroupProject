Index: src/app/CreatePlaylistUseCaseFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\n\nimport data_access.FileDataAccessObject;\nimport interface_adapter.ViewManagerModel;\nimport interface_adapter.create_playlist.CreatePlaylistController;\nimport interface_adapter.create_playlist.CreatePlaylistPresenter;\nimport interface_adapter.create_playlist.CreatePlaylistViewModel;\nimport interface_adapter.homepage.HomepageViewModel;\nimport use_case.create_playlist.CreatePlaylistInputBoundary;\nimport use_case.create_playlist.CreatePlaylistInteractor;\nimport use_case.create_playlist.CreatePlaylistOutputBoundary;\nimport use_case.create_playlist.CreatePlaylistDataAccessInterface;\nimport view.CreatePlaylistView;\nimport view.HomepageView;\n\nimport javax.swing.*;\nimport java.io.IOException;\n\npublic class CreatePlaylistUseCaseFactory {\n    public static CreatePlaylistView create(ViewManagerModel viewManagerModel,\n                                            HomepageViewModel homepageViewModel,\n                                            CreatePlaylistViewModel createPlaylistViewModel,\n                                            CreatePlaylistDataAccessInterface createPlaylistDataAccessObject) {\n\n        try {\n            CreatePlaylistController createPlaylistController = createCreatePlaylistUseCase(viewManagerModel, createPlaylistViewModel, homepageViewModel, createPlaylistDataAccessObject);\n            return new CreatePlaylistView(createPlaylistViewModel, createPlaylistController);\n        } catch (IOException e) {\n            JOptionPane.showMessageDialog(null, \"Could not open user data file.\");\n        }\n        return null;\n    }\n\n    private static CreatePlaylistController createCreatePlaylistUseCase(\n            ViewManagerModel viewManagerModel,\n            CreatePlaylistViewModel createPlaylistViewModel,\n            HomepageViewModel homepageViewModel,\n            CreatePlaylistDataAccessInterface createPlaylistDataAccessObject) throws IOException {\n\n        // Notice how we pass this method's parameters to the Presenter.\n        CreatePlaylistOutputBoundary createPlaylistOutputBoundary = new CreatePlaylistPresenter(createPlaylistViewModel, homepageViewModel, viewManagerModel);\n        // TODO: Incomplete method. Missing factory and DAO.\n        CreatePlaylistInputBoundary createPlaylistInteractor = new CreatePlaylistInteractor(createPlaylistDataAccessObject, createPlaylistOutputBoundary);\n        return new CreatePlaylistController(createPlaylistInteractor);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/CreatePlaylistUseCaseFactory.java b/src/app/CreatePlaylistUseCaseFactory.java
--- a/src/app/CreatePlaylistUseCaseFactory.java	(revision 928ce5937fe624bde84f52422339ab8e94ca645f)
+++ b/src/app/CreatePlaylistUseCaseFactory.java	(date 1700009248078)
@@ -24,7 +24,7 @@
 
         try {
             CreatePlaylistController createPlaylistController = createCreatePlaylistUseCase(viewManagerModel, createPlaylistViewModel, homepageViewModel, createPlaylistDataAccessObject);
-            return new CreatePlaylistView(createPlaylistViewModel, createPlaylistController);
+            return new CreatePlaylistView(createPlaylistViewModel, createPlaylistController, homepageViewModel);
         } catch (IOException e) {
             JOptionPane.showMessageDialog(null, "Could not open user data file.");
         }
Index: src/interface_adapter/create_playlist/CreatePlaylistViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interface_adapter.create_playlist;\n\nimport interface_adapter.ViewModel;\nimport interface_adapter.homepage.HomepageViewModel;\n\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\n\npublic class CreatePlaylistViewModel extends ViewModel {\n    public static final String NEWPLAYLIST_BUTTON_LABEL = \"Create New Playlist\";\n    public static final String TITLE_LABEL = \"Create Playlist View\";\n    private CreatePlaylistState state = new CreatePlaylistState();\n    public CreatePlaylistViewModel(){\n        super(\"create playlist\"); // TODO So it can't be super class of anything? Not sure how super works.\n    }\n\n    public void setState(CreatePlaylistState state) {this.state = state;}\n\n    private final PropertyChangeSupport support = new PropertyChangeSupport(this);\n\n//  Methods firePropertyChanged, addPropertyChangeListener are inherited from HomepageViewModel.\n    public CreatePlaylistState getCreatePlaylistState() {return state;}\n\n    @Override\n    public void firePropertyChanged() {\n        support.firePropertyChange(\"state\", null, this.state);\n    }\n\n    @Override\n    public void addPropertyChangeListener(PropertyChangeListener listener) {\n        support.addPropertyChangeListener(listener);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/interface_adapter/create_playlist/CreatePlaylistViewModel.java b/src/interface_adapter/create_playlist/CreatePlaylistViewModel.java
--- a/src/interface_adapter/create_playlist/CreatePlaylistViewModel.java	(revision 928ce5937fe624bde84f52422339ab8e94ca645f)
+++ b/src/interface_adapter/create_playlist/CreatePlaylistViewModel.java	(date 1700010191191)
@@ -7,18 +7,19 @@
 import java.beans.PropertyChangeSupport;
 
 public class CreatePlaylistViewModel extends ViewModel {
-    public static final String NEWPLAYLIST_BUTTON_LABEL = "Create New Playlist";
-    public static final String TITLE_LABEL = "Create Playlist View";
+    public static final String TITLE_LABEL = "Create New Playlist View";
+    public static final String PLAYLISTNAME_LABEL = "Enter name for new playlist";
+    public static final String DESCRIPTION_LABEL = "Describe the new playlist";
+    public static final String TOHOME_BUTTON_LABEL = "Back to homepage";
     private CreatePlaylistState state = new CreatePlaylistState();
     public CreatePlaylistViewModel(){
-        super("create playlist"); // TODO So it can't be super class of anything? Not sure how super works.
+        super("create playlist");
     }
 
     public void setState(CreatePlaylistState state) {this.state = state;}
 
     private final PropertyChangeSupport support = new PropertyChangeSupport(this);
 
-//  Methods firePropertyChanged, addPropertyChangeListener are inherited from HomepageViewModel.
     public CreatePlaylistState getCreatePlaylistState() {return state;}
 
     @Override
Index: src/view/CreatePlaylistView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport interface_adapter.create_playlist.CreatePlaylistController;\nimport interface_adapter.create_playlist.CreatePlaylistState;\nimport interface_adapter.create_playlist.CreatePlaylistViewModel;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n\npublic class CreatePlaylistView extends JPanel implements ActionListener, PropertyChangeListener {\n    public final String viewName = \"create playlist\";\n    private final CreatePlaylistViewModel createPlaylistViewModel;\n    private final CreatePlaylistController createPlaylistController;\n    final JTextField playlistNameInputField = new JTextField(15);\n    private final JLabel playlistNameError = new JLabel(); // Captures repeated playlist name created by the same account.\n    final JButton createPlaylist;\n    public CreatePlaylistView(CreatePlaylistViewModel createPlaylistViewModel, CreatePlaylistController createPlaylistController){\n\n        this.createPlaylistViewModel = createPlaylistViewModel;\n        this.createPlaylistViewModel.addPropertyChangeListener(this);\n        this.createPlaylistController = createPlaylistController;\n\n        JLabel title = new JLabel(\"Create New Playlist Screen\");\n        title.setAlignmentX(Component.CENTER_ALIGNMENT);\n        LabelTextPanel playlistNameInfo = new LabelTextPanel(\n                new JLabel(\"Name for the new playlist\"), playlistNameInputField);\n        JPanel buttons = new JPanel();\n        createPlaylist = new JButton(createPlaylistViewModel.NEWPLAYLIST_BUTTON_LABEL);\n        buttons.add(createPlaylist);\n//        this.createPlaylist = createPlaylist;\n\n        createPlaylist.addActionListener(this); //TODO: to be implemented, framework shown below.\n//        createPlaylist.addActionListener(){\n//            public void actionPerformed(ActionEvent evt) {\n//                if (evt.getSource().equals(createPlaylist)) {\n//                    CreatePlaylistState currentState = createPlaylistViewModel.getState();\n//                    // TODO: missing implementation of getState(), getPlaylistName()\n//                    createPlaylistController.execute(\n//                            currentState.getPlaylistName()\n//                    );\n//                }\n//            }\n//        };\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"Click \" + e.getActionCommand());\n    }\n\n    @Override\n    public void propertyChange(PropertyChangeEvent evt) {\n        CreatePlaylistState state = (CreatePlaylistState) evt.getNewValue();\n        // There's a method in LoginView that allows automatic fill-in-the-blank.\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/CreatePlaylistView.java b/src/view/CreatePlaylistView.java
--- a/src/view/CreatePlaylistView.java	(revision 928ce5937fe624bde84f52422339ab8e94ca645f)
+++ b/src/view/CreatePlaylistView.java	(date 1700010414514)
@@ -1,13 +1,19 @@
 package view;
 
+import interface_adapter.ViewManagerModel;
 import interface_adapter.create_playlist.CreatePlaylistController;
 import interface_adapter.create_playlist.CreatePlaylistState;
 import interface_adapter.create_playlist.CreatePlaylistViewModel;
+import interface_adapter.homepage.HomepageController;
+import interface_adapter.homepage.HomepageState;
+import interface_adapter.homepage.HomepageViewModel;
 
 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
@@ -16,24 +22,43 @@
     private final CreatePlaylistViewModel createPlaylistViewModel;
     private final CreatePlaylistController createPlaylistController;
     final JTextField playlistNameInputField = new JTextField(15);
+    final JTextField descriptionInputField = new JTextField(15);
+    // TODO: Adjust display columns (field width) if description is too long.
     private final JLabel playlistNameError = new JLabel(); // Captures repeated playlist name created by the same account.
-    final JButton createPlaylist;
-    public CreatePlaylistView(CreatePlaylistViewModel createPlaylistViewModel, CreatePlaylistController createPlaylistController){
+    final JButton backToHome;
+    private ViewManagerModel viewManagerModel;
+
+    public CreatePlaylistView(CreatePlaylistViewModel createPlaylistViewModel, CreatePlaylistController createPlaylistController,
+                              HomepageViewModel homepageViewModel){
 
         this.createPlaylistViewModel = createPlaylistViewModel;
         this.createPlaylistViewModel.addPropertyChangeListener(this);
         this.createPlaylistController = createPlaylistController;
 
-        JLabel title = new JLabel("Create New Playlist Screen");
+        JLabel title = new JLabel(CreatePlaylistViewModel.TITLE_LABEL);
         title.setAlignmentX(Component.CENTER_ALIGNMENT);
+
         LabelTextPanel playlistNameInfo = new LabelTextPanel(
-                new JLabel("Name for the new playlist"), playlistNameInputField);
+                new JLabel(CreatePlaylistViewModel.PLAYLISTNAME_LABEL), playlistNameInputField);
+        LabelTextPanel descriptionInfo = new LabelTextPanel(
+                new JLabel(CreatePlaylistViewModel.DESCRIPTION_LABEL), playlistNameInputField);
         JPanel buttons = new JPanel();
-        createPlaylist = new JButton(createPlaylistViewModel.NEWPLAYLIST_BUTTON_LABEL);
-        buttons.add(createPlaylist);
+        backToHome = new JButton(createPlaylistViewModel.TOHOME_BUTTON_LABEL);
+        buttons.add(backToHome);
 //        this.createPlaylist = createPlaylist;
 
-        createPlaylist.addActionListener(this); //TODO: to be implemented, framework shown below.
+        backToHome.addActionListener(
+                new ActionListener() {
+                    @Override
+                    public void actionPerformed(ActionEvent evt) {
+                        if (evt.getSource().equals(backToHome)){
+                            // Doesn't pass in any parameter. Switch view to CreatePlaylistView.
+                            viewManagerModel.setActiveView(homepageViewModel.getViewName());
+                            viewManagerModel.firePropertyChanged();
+                        }
+                    }
+                }
+        ); //TODO: to be implemented, framework shown below.
 //        createPlaylist.addActionListener(){
 //            public void actionPerformed(ActionEvent evt) {
 //                if (evt.getSource().equals(createPlaylist)) {
